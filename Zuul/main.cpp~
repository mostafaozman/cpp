#include <iostream>
#include <cstring>
#include <iomanip>
#include <vector>
#include <map>
#include "room.h"
#include "item.h"

using namespace std;

void initializeRooms(vector<Room*>* rooms);
void initializeItems(vector<Item*>* items);
void printRoom(vector<Room*>* rooms, vector<Item*>* items, int currentRoom);
void printInventory(vector<Item*>* items, vector<int> inventory);
void pickItem(vector<Room*>* rooms, vector<Item*>* items, vector<int>* inventory, int currentRoom, char name[]);
void dropItem(vector<Room*>* rooms, vector<Item*>* items, vector<int>* inventory, int currentRoom, char name[]);
int move(vector<Room*>* rooms, int currentRoom, char direction[]); 


int main()
{
  vector<Room*> rooms;
  vector<Item*> items;
  vector<int> inventory;
  char input[30];
  int currentRoom = 1;
  initializeItems(&items);
  initializeRooms(&rooms);

  cout << "You find yourself in the dark, inside a mansion. You vaguely recall that you may have been at a party of some sorts.  The doors all around the perimiter are locked, can you get out?" << endl; 

  cout << "\n" << "type 'help' if you need help" << endl;

  

}

void initializeRooms(vector<Room*>* rooms)
{
  char* west = (char*)("west");
  char* east = (char*)("east");
  char* north = (char*)("north");
  char* south = (char*)("south");
  map<int, char*> temp; //temporary map to store exits then make them room exits

  // Lobby
  Room* lobby = new Room();
  lobby -> setDes((char*)("The front of the building")); // set description of the room
  lobby -> setID(1); // set room ID
  // set exits
  temp.insert(pair<int, char*> (2, north));
  temp.insert(pair<int, char*> (3, west));
  temp.insert(pair<int, char*> (4, south);
	      lobby -> setItem(0); 
	      lobby -> setExit(temp); // pushes exits to class
	      rooms -> push_back(lobby); // pushes room to the vector
	      temp.clear(); //clears the map
}

void initializeItems(vector<Item*>* items)
{
  // key
  Item* key = new Item();
  key -> setName((char*)("Janitor Key"));
  key -> setID(1);
  items -> push_back(key);
  //coins
  Item* coin = new Item();
  coin -> setName((char*)("Two Quarters"));
  coin -> setID(2);
  items -> push_back(coin);
  //Screw
  Item* screw = new Item();
  screw -> setName((char*)("A half inch screw"));
  screw -> setID(3);
  items	-> push_back(screw);
  // light bulb
  Item* light = new Item();
  light -> setName((char*)("LED light bulb"));
  light -> setID(4);
  items	-> push_back(coin);
  // Screw Driver
  Item* driver = new Item();
  driver -> setName((char*)("A screw driver"));
  driver -> setID(5);
  items -> push_back(driver); 
}

void printRoom(vector<Room*>* rooms, vector<Item*>* items, int currentRoom)
{
  vector<Room*>::iterator i;
  vector<Item*>::iterator z;

  for ( i = rooms -> begin(); i != rooms -> end(); i++)
    {
      if (currentRoom == (*i) -> getID())
	{
	  cout << (*i) -> getDes() << "." << endl;
	  cout << "Your exits are: ";
	  for (map<int, char*>::const_iterator it = (*i) -> getExit() -> begin(); it != (*i) -> getExit() -> end(); i++)
	    {
	      cout << it -> second << " "; 
	    }
	  cout << endl;
	  cout << "In this room there are: " << endl;
	  for (z = items -> begin(); z != items -> end(); z++)
	    {
	      if((*i) -> getItem() == (*z) -> getID())
		{
		  cout << (*z) -> getName() << endl; 
		}
	    }
	  cout << endl;
	  break; 
	}
    }
}

void printInventory(vector<Item*>* items, vector<int> inventory)
{
  vector<int>::iterator i;
  vector<Item*>::iterator j;

  for (i = inventory.begin(); i != inventory.end(); i++)
    {
      for (j = items -> begin(); j != items -> end(); j++)
	{
	  if( *i == (*j) -> getID())
	    {
	      cout << (*j) -> getName() << endl; 
	    }
	}
    }
  cout << endl; 

}

void pickItem(vector<Room*>* rooms, vector<Item*>* items, vector<int>* inventory, int currentRoom, char name[])
{
  vector<Room*>::iterator i;
  vector<Item*>::iterator j;
  
  for (i = rooms -> begin(); i != rooms -> end(); i++)
    {
      if (currentRoom == (*i) -> getID())
	{
	  for( j = items -> begin(); j != items -> end(); j++)
	    {
	      if ((*i) -> getItem() == (*j) -> getID() && (strcmp((*j) -> getName(), name) == 0))
		{
		  inventory -> push_back((*j) -> getID());
		  (*i) -> setItem(0);
		  cout << endl << "You picked up " << (*j) -> getName() << "." << endl;
		  return; 
		}
	    }
	}
    }

  cout << endl << "The item you are looking for is not here" << endl << endl; 

}

void dropItem(vector<Room*>* rooms, vector<Item*>* items, vector<int>* inventory, int currentRoom, char name[])
{
  int count;
  vector<Room*>::iterator i;
  vector<Item*>::iterator j;
  vector<int>::iterator z;

  for (i = rooms -> begin(); i != rooms -> end(); i++)
    {
      if (currentRoom == (*i) -> getID())
	{
	  if ((*i) -> getItem() == 0)
	    {
	      for ( j = items -> begin(); j != items -> end(); j++)
		{
		  if ((strcmp((*j) -> getName(), name) == 0))
		    {
		      for( z = inventory -> begin(); z != inventory -> end(); z++)
			{
			  if ((*z) == (*j) -> getID())
			    {
			      cout << endl << "You dropped: " << (*j) -> getName() << endl << endl;
			      (*i) -> setItem((*j) -> getID());
			      z = inventory -> erase(z);
			      return; 
			    }
			}
		    }

		  else if (count == items -> size() - 1)
		    {
		      cout << endl << "This item is not currently in your inventory" << endl;
		      
		    }
		  count++; 
		}
	    }

	  else
	    {
	      cout << "This item has already been dropped here" << endl; 
	    }
	}
    }
      cout << endl; 

}

int move(vector<Room*>* rooms, int currentRoom, char direction[])
{
  vector<Room*>::iterator i; 
  
  for( i = rooms -> begin(); i != rooms -> end(); i++)
    {
      if (currentRoom == (*i) -> getID())
	{
	  map <int, char*> exit;
	  exit = *(*i) -> getExit();
	  map<int, char*>::const_iterator z;
	  for(z = exit.begin(); z != exit.end(); z++)
	    {
	      if (strcmp(z -> second, direction) == 0)
		{
		  return z -> first; 
		}
	    }
	}
    }

  return 0; 

}
